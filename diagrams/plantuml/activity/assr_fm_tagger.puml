@startuml
'https://plantuml.com/activity-diagram-beta

|Main|
start
:Construct FMTagger();
note right
    audio,
    stimuli_intervals
    frequency
end note

:FMTagger.create();

repeat
    |FMTagger|
    :get next stimulus interval;
    :audio_chunk = audio[stimulus interval];

    :analytic = hilbert(signal);
    note right
        Hilbert transform
        implementation from
        scipy
    end note
    :amplitude, phase =
      extract_amplitudes_phases(analytic);
    note right
        amplitude = np.abs(numbers)
        phase = np.unwrap(np.angle(numbers))
    end note

    :inst_freq =
       phases_to_instantaneous_frequencies(phase);
    note right
        np.diff(phase) / (2 * pi) * fs
    end note

    |tagger_getter|
    :modulating_sine =
      sine_signal(inst_freq.shape[0], frequency, audio.fs);

    |FMTagger|
    :shifted_inst_freq =
      inst_freq + modulation_factor * modulating_sine;

    :phase_shifted =
      instantaneous_frequencies_to_phases(shifted_inst_freq, phase[0, :]);
    note right
        shifted_inst_freq * (2 * pi) / fs
    end note

    :reconstructed_shifted =
      get_complex_number(amplitude, phase_shifted);
    note right
        amplitude * np.e ** (1j * phase)
    end note

    :modulated_chunk = np.real(reconstructed_shifted);
    :insert modulated_chunk into audio;
repeat while(next stimulus interval?) is (yes)
->no;
:return audio;

|Main|
:Further processing;
stop


@enduml
