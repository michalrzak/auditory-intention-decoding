@startuml

class Experiment {
    +Experiment(model: Model, view: AView)
    + void run()
}

class Model <<Observable>>{
    -list[str] promptHistory
    -str currentPrompt

    -void notify(data: Any, identifier: EModelUpdateIdentifier)
    +void register(view: View)
    +void new_prompt(prompt: str)
    +void change_experiment_state(new_state: EExperimentState)
}

enum EExperimentState {
    RESTING_STATE
    EXPERIMENT
}

abstract class AView<<observer>> {
    +void {abstract} update(data: Any, identifier: EModelUpdateIdentifier)
    +bool {abstract} get_confirmation()
}

class PsychopyView {
}

class CLIView {
}

enum EModelUpdateIdentifier {
    NEW_PROMPT
    EXPERIMENT_STATE_CHANGED
}

abstract class AAuditoryStimulus {
  -Audio __audio
  -list[ [float, float] ] __stimuli_intervals
  -Optional[Audio] __audio_with_stimulus

  +void __init__(audio: Audio, stimuli: list[(float, float)])
  +void create()
  +void present()

  #Audio {abstract} _create_modified_audio(audio: Audio, stimuli: list[(float, float)])

}


class N400Stimulus {
  #Audio _create_modified_audio(audio: Audio, stimuli: list[(float, float)])
}

class ASSRStimulus {
  #Audio _create_modified_audio(audio: Audio, stimuli: list[(float, float)])
}

class NoiseTaggingStimulus {
  #Audio _create_modified_audio(audio: Audio, stimuli: list[(float, float)])
}


class MockStimulus {
  #Audio _create_modified_audio(audio: Audio, stimuli: list[(float, float)])
}

AAuditoryStimulus <|-- N400Stimulus
AAuditoryStimulus <|-- ASSRStimulus
AAuditoryStimulus <|-- NoiseTaggingStimulus
AAuditoryStimulus <|-- MockStimulus

View <|-- PsychopyView
View <|-- CLIView

View ..> ModelUpdateIdentifier: "uses"

Model "*" o--- "1" ExperimentState
Experiment "1" *--- "1" Model
Experiment "1" *--- "1" AView

Model "1" --- "*" View
@enduml
