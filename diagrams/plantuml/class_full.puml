@startuml
note as n
  <b>Note</b>: To save space, constructor parameter types,
  which match the types of the class parameters,
  are not specified
end note

class Audio {
        +NDArray[float] array
        +int sampling_frequency
    }

package view {
    abstract class AView<<Observer>> {
        #Callable[[Audio], None] sound_player
        #Dict[EExperimentState, Optional[str]] experiment_texts

        +AView(sound_player, experiment_texts)

        #void {abstract} update_new_stimulus(stimulus: CreatedStimulus)
        #void {abstract} updated_new_primer(primer: str)
        #void {abstract} update_experiment_state_changed(data: EExperimentState)
        +void update(data: Any, identifier: EModelUpdateIdentifier
        +bool {abstract} get_confirmation()
        +void {abstract} wait(secs: int)
    }

    class PsychopyView {
    }

    class CLIView {
    }
}

package auditory_tagging {
    abstract class AAudioTagger {
      #NDArray[float] {abstract} modify_chunk(audio_array_chunk: NDArray[float], fs: int))
      +Audio create(audio, stimuli)
    }


    package assr_tagger {
        class AMTagger {
          -int frequency
          -Callable[[int, int, int], NDArray[float] tag_generator
          -[float, float] signal_interval

          +ASSRTagger(frequency, tag_generator, signal_interval)
        }

        class FMTagger {
          -int frequency
          -float modulation_factor

          +FMTagger(frequency, modulation_factor)
          -(NDArray[Real], NDArray[Real]) {static} extract_amplitudes_phases(numbers: NDArray[Complex])
          -NDArray[Complex] {static} get_complex_number(amplitudes: NDArray[Real], phases: NDArray[Real])
          -NDArray[Real] phases_to_instantaneous_frequencies(phases: NDArray[Real], fs: int)
          -NDArray[Real] instantaneous_frequencies_to_phases(instantaneous_frequencies: NDArray[Real], first_phase: NDArray[Real], fs: int)
          -NDArray[float32] modulate(signal: NDArray[float32])

        }

        class FlippedFMTagger {
          -int frequency
          -int scaling_factor

          +FlippedFMTagger(frequency, scaling_factor)
        }
    }

    class NoiseTaggingTagger {
      -Generator rng
      -int specified_fs
      -int bit_width
      -int length_bit
      +Optional[Code] code

      +NoiseTaggingTagger(fs:int, bits_per_second: int, length_bit, rng)
      -void __generate_code()
      -void __get_code(length: int)
    }

    class RawTagger {
    }

    package shift_taggers {
        class ShiftSumTagger {
          -int shift_by

          +ShiftSumTagger(shift_by)
        }

        class SpectrumShiftTagger {
          -int shift_by

          +SpectrumShiftTagger(shift_by)
        }

        class BinauralTagger {
            -int shift_by
            +BinauralTagger(shift_by)
        }
    }
}

package model {
    abstract class AObserver {
        +void update(data: Any, identifier: EModelUpdateIdentifier)
    }

    class Model <<Observable>>{
        -List[str] primer_history

        -Model(stimuli: List[CreatedStimulus])
        -void notify(data: Any, identifier: EModelUpdateIdentifier)
        +void register(view: AObserver, priority: int)
        +void new_stimulus(stimulus: CreatedStimulus)
        +void new_primer(stimulus: CreatedStimulus)
        +void change_experiment_state(new_state: EExperimentState)
    }
    class Logger<<Observer>> {
        -Path exports_directory
        +Logger(target_folder: PathLike)
    }
    Logger -u-|> AObserver

    package constants {
        enum EExperimentState {
            INACTIVE
            INTRODUCTION
            RESTING_STATE_EYES_OPEN
            RESTING_STATE_EYES_CLOSED
            EXPERIMENT_INTRODUCTION
            EXPERIMENT
            BREAK
            OUTRO
            EXAMPLE
        }

        enum EModelUpdateIdentifier {
            NEW_STIMULUS
            NEW_PRIMER
            EXPERIMENT_STATE_CHANGED
        }
    }

    abstract class AStimulus {
        +str prompt
        +str primer
        +List[str] options
        +List[Tuple[float, float]] time_stamps
    }
    AStimulus "*" *-u- "1" AAudioTagger: used_tagger
    AStimulus "1" *-r- "1" Audio: audio


    class Stimulus {
        +int target_index
    }
    Stimulus -u-|> AStimulus

    class AttentionCheckStimulus {}
     AttentionCheckStimulus -u-|> AStimulus
}
Model "1" *-r- "*" AStimulus: "stimulus_history"
Model "1" *-r- "*" AStimulus: created_stimuli
Model "1" *-r- "*" AStimulus: "example_stimuli"
Model "*" o--- "1" EExperimentState: "experiment_state"
Model "1" o-l-- "*" AObserver

Model ..> EModelUpdateIdentifier: "uses"

AObserver .l.> constants: "uses"

AView --|> AObserver


package eeg {
   enum ETrigger{
     +ETrigger {static} get_trigger(data: Any, identifier: EModelUpdateIdentifier
   }
   note bottom of ETrigger: Contains tha mappings to\nthe actual trigger numbers\nsent

    abstract class ATriggerSender {
        -Queue trigger_queue
        -float thread_timout_secs
        -thread Thread
        -bool exit_flag
        -List[Trigger]: trigger_enqueue_threads

        +ATriggerSender(thread_timout_secs: float)
        -void trigger_worker()
        -void queue_trigger(trigger: ETrigger, offset_secs: float)
        #void {abstract} send_trigger(trigger: ETrigger)
        +ATriggerSender start()
        +void __del__()
    }
    note bottom
        This class uses a context management]
        (i.e. the with syntax) to start/stop threads.
        Call the start method to enter into a context
        which gets automatically cleaned up
        (the thread is killed).
    end note

   class BittiumTriggerSender {
     -IParallelPort parallel_port
     -int trigger_duration_s
     +BittiumTriggerSender(thread_timout_secs, parallel_port, trigger_duration_s)
     #void send_trigger(trigger: ETrigger)
   }

   class FileTriggerSender {
     -IO file
     +FileTriggerSender(thread_timout_secs, target_file: PathLike)
   }
}

view -[hidden]- eeg

ATriggerSender -u-|> AObserver
BittiumTriggerSender -r-|> ATriggerSender
FileTriggerSender -d-|> ATriggerSender
ATriggerSender ..> ETrigger: "uses"

AAudioTagger <|-u- BinauralTagger
AAudioTagger <|-u- SpectrumShiftTagger
AAudioTagger <|-u- ShiftSumTagger
AAudioTagger <|-u- RawTagger
AAudioTagger <|-u- NoiseTaggingTagger
AAudioTagger <|-u- AMTagger
AAudioTagger <|-u- FMTagger
AAudioTagger <|-u- FlippedFMTagger


AView <|-- PsychopyView
AView <|-- CLIView



interface ExperimentDurations {
    +float resting_state_secs
    +float primer_secs
    +float break_secs
    +float attention_check_secs

}

class Experiment {
    -int stimulus_repeat

    +Experiment(model, view, stimulus_repeat, experiment_durations)
    +void create_stimuli()
    +void run()
}
Experiment "*" o-l- "1" ExperimentDurations
Experiment "1" *-- "1" Model
Experiment "1" *-- "1" AView


Experiment -[hidden] auditory_tagging
@enduml
